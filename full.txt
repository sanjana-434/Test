1)
from fractions import Fraction
import math

def f_(x):
  #f_value = (1/(1+x**2))
  f_value = math.log(x,math.e)
  #f_value = math.exp(-x**2)
  return f_value

h = Fraction(input("Enter h : "))
ll = float(input("Enter Lower Limit : "))
ul = float(input("Enter Upper Limit : "))


#y_x values
y_x_ = []
n = int((ul - ll) / h)   #number of parts
#x_ = x values
x_ = ll
while(x_ < ul+h):
  y_x_.append(f_(x_))
  x_ += h

#TRAPEZOIDAL RULE

result1 = h/2*(y_x_[0]+y_x_[-1]+2*sum(y_x_[1:-1]))
print("Value of integral using Trapezoidal Rule : ",round(result1,3))


#SIMPSON'S 1/3 RULE

result2 = 0
term1 = [y_x_[0],y_x_[-1]]
term2 = []
term3 = []
for i in range(1,len(y_x_)-1):
  if (i%2==0):
    term2.append(y_x_[i])
  else:
    term3.append(y_x_[i])
#print(term1)
#print(term2)
#print(term3)
result2 = h/3*(sum(term1)+2*sum(term2)+4*sum(term3))
print("Value of integral using Simpson's 1/3 Rule : ",round(result2,3))


#SIMPSON'S 3/8 RULE

if (n%3!=0):
  print("Simpson's 3/8 rule is not applicable, as n is not a multiple of 3")
else:
  term1 = [y_x_[0],y_x_[-1]]
  term3 = y_x_[n//2]
  term2 = y_x_[1:-2]
  term2.remove(term3)
  print(term3)
  print(term2)
  print(term1)
  result3 = (3/8)*(h)*(sum(term1)+3*sum(term2)+2*(term3))
  print("Value of integral using Simpson's 3/8 Rule : ",round(result3,3))

2)

# newton forward interpolation

def calc(u,n):
	temp=u;
	for i in range(1,n):
		temp=temp*(u-i);
	return temp;

def fact(n):
	f=1;
	for i in range(2,n+1):
		f=f*i;
	return f;


# Number of values given
n=4;
x=[45,50,55,60];

y = [[0 for i in range(n)]for j in range(n)];
y[0][0]=0.7071;
y[1][0]=0.7660;
y[2][0]=0.8192;
y[3][0]=0.8660;

for i in range(1,n):
	for j in range(n-i):
		y[j][i]=y[j+1][i-1]-y[j][i-1];

for i in range(n):
	print(x[i],end="\t");
	for j in range(n-i):
		print(round(y[i][j],4),end="\t");
	print("");

value = 52;

sum=y[0][0];
u=(value-x[0])/(x[1]-x[0]);
for i in range(1,n):
	sum=sum+(calc(u,i)*y[0][i])/fact(i);

print("\nValue at", value, "is", round(sum, 4));


# newton backwack interpolation

def calc(u,n):
	temp=u
	for i in range(n):
		temp=temp*(u+i)
	return temp

# Calculating factorial of given n
def fact(n):
	f = 1
	for i in range(2,n+1):
		f=f*i
	return f

# number of values given
n=5
x=[45,50,55,60,65];

# y is used for difference

y = [[0 for i in range(n)] for j in range(n)]
y[0][0]=114.84;
y[1][0]=96.16;
y[2][0]=83.32;
y[3][0]=74.48;
y[4][0]=68.48

# Calculating the backward difference table
for i in range(1,n):
	for j in range(n-1,i-1,-1):
		y[j][i]=y[j][i-1]-y[j-1][i-1]

# Displaying the backward difference table
for i in range(n): 
    print(x[i],end="\t");
    for j in range(i+1):
        print(round(y[i][j],4),end="\t") 
    print("")

# Value to interpolate at
value = 64

# Initializing u and sum
sum = y[n-1][0]
u=(value-x[n-1])/(x[1]-x[0])
for i in range(1,n):
	sum=sum+(calc(u,i)*y[n-1][i])/fact(i)

print("\nValue at",value,"is",round(sum,4))

3)
# Newton's divided difference, lagrange, inverse lagrange, cubic spline

# Newton divided difference formula
 
# Function to find the product term
def proterm(i, value, x):
    pro = 1;
    for j in range(i):
        pro = pro * (value - x[j]);
    return pro;
 
# Function for calculating
# divided difference table
def dividedDiffTable(x, y, n):
 
    for i in range(1, n):
        for j in range(n - i):
            y[j][i] = ((y[j][i - 1] - y[j + 1][i - 1]) /
                                     (x[j] - x[i + j]));
    return y;
 
# Function for applying Newton's
# divided difference formula
def applyFormula(value, x, y, n):
 
    sum = y[0][0];
 
    for i in range(1, n):
        sum = sum + (proterm(i, value, x) * y[0][i]);
     
    return sum;
 
# Function for displaying divided
# difference table
def printDiffTable(y, n):
 
    for i in range(n):
        for j in range(n - i):
            print(round(y[i][j], 4), "\t",
                               end = " ");
 
        print("");
 
# Driver Code
 
# number of inputs given
n = 4;
y = [[0 for i in range(10)]
        for j in range(10)];
x = [ 5, 6, 9, 11 ];
 
# y[][] is used for divided difference
# table where y[][0] is used for input
y[0][0] = 12;
y[1][0] = 13;
y[2][0] = 14;
y[3][0] = 16;
 
# calculating divided difference table
y=dividedDiffTable(x, y, n);
 
# displaying divided difference table
printDiffTable(y, n);
 
# value to be interpolated
value = 7;
 
# printing the value
print("\nValue at", value, "is",
        round(applyFormula(value, x, y, n), 2))


# of Lagrange's Interpolation
 
# To represent a data point corresponding to x and y = f(x)
class Data:
    def __init__(self, x, y):
        self.x = x
        self.y = y
 
# function to interpolate the given data points
# using Lagrange's formula
# xi -> corresponds to the new data point
# whose value is to be obtained
# n -> represents the number of known data points
def interpolate(f: list, xi: int, n: int) -> float:
 
    # Initialize result
    result = 0.0
    for i in range(n):
 
        # Compute individual terms of above formula
        term = f[i].y
        for j in range(n):
            if j != i:
                term = term * (xi - f[j].x) / (f[i].x - f[j].x)
 
        # Add current term to result
        result += term
 
    return result
 
# Driver Code
if __name__ == "__main__":
 
    # creating an array of 4 known data points
    f = [Data(0, 2), Data(1, 3), Data(2, 12), Data(5, 147)]
 
    # Using the interpolate function to obtain a data point
    # corresponding to x=3
    print("Value of f(3) is :", interpolate(f, 3, 4))




# inverse interpolation

class Data:
    def __init__(self, x, y):
        self.x = x
        self.y = y
 
# Function to calculate
# the inverse interpolation
def inv_interpolate(d: list, n: int,
                    y: float) -> float:
 
    # Initialize final x
    x = 0
 
    for i in range(n):
 
        # Calculate each term
        # of the given formula
        xi = d[i].x
        for j in range(n):
            if j != i:
                xi = (xi * (y - d[j].y) /
                      (d[i].y - d[j].y))
 
        # Add term to final result
        x += xi
    return x
 
# Driver Code
if __name__ == "__main__":
 
    # Sample dataset of 4 points
    # Here we find the value
    # of x when y = 4.5
    d = [Data(1.27, 2.3),
         Data(2.25, 2.95),
         Data(2.5, 3.5),
         Data(3.6, 5.1)]
 
    # Size of dataset
    n = 4
 
    # Sample y value
    y = 4.5
 
    # Using the Inverse Interpolation
    # function to find the
    # value of x when y = 4.5
    print("Value of x at y = 4.5 :",
           round(inv_interpolate(d, n, y), 5))


#CUBIC SPLINE

import numpy as np
import sympy as sp

def ch(n):
  if n < 0:
    return '-'
  else:
    return '+'


n = int(input("Enter number of values : "))
x  = []
fx = []

for i in range(n):
  x.append(float(input("Enter x : ")))
  fx.append(float(input("Enter f(x) : ")))

'''n=4
x=[1,2,3,4]
fx=[1,5,11,8]'''

h = x[1] - x[0]
d = []

for i in range(1, n - 1):
  d.append(6 * (fx[i-1] - 2 * fx[i] + fx[i+1]) / (h*h) )

a = np.zeros((n-2, n-2))

for i in range(n - 2):
  for j in range(n - 2):
    
    if i == j:
      a[i][j] = 4
      
    elif abs(i-j) == 1:
      a[i][j] = 1

m = np.linalg.solve( a, np.array(d) )
m = m.tolist()
m.insert(0, 0)
m.insert(n, 0)

px = []

print("\nThe Cubic Equations : \n")
for i in range(n - 1):
  t = "%f*(%f - x)**3/6*%d %c %f*(x %c %f)**3/6*%d + (%f - x)*(%f %c %f*%d/6)/%d + (x %c %f)*(%f %c %f*%d/6)/%d"%(m[i],x[i+1],h,ch(m[i+1]),abs(m[i+1]),ch(-x[i]),abs(x[i]),h,x[i+1],fx[i],ch(-m[i]),abs(m[i]),h*h,h,ch(-x[i]),abs(x[i]),fx[i+1],ch(-m[i+1]),abs(m[i+1]),h*h,h)
  px.append(str(sp.expand(t)))
  print("p%d(x) = %s"%((i+1),px[i]))

X = float(input("\nEnter the x to find f(x) :"))

for i in range(len(x)):
  if x[i] >= X:
    break

print("\nf(%.2f) = %.2f"%(X,eval((px[i-1]).replace('x',str(X)))))
